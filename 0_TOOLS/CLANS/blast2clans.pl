#!/usr/bin/perl
#This script creates an input file for CLANS. It accepts a 
#tabular output file generated by all-against-all blastp/psiblast comparisons.
#
#Input file format (QueryID SubjectID E-value)


#CAK24995#5	NP_877456#7	8.13e-13
#CAK24995#5	YP_338096#3	2.29e-12
#CAK24995#5	NP_813751#8	2.67e-10
#CAK24995#5	NP_523305#4	3.75e-09
#NP_813751#8	NP_813751#8	2.59e-33
#NP_813751#8	NP_523305#4	6.06e-20
#NP_813751#8	YP_338096#3	3.82e-17
#NP_813751#8	YP_249578#6	1.00e-15
#NP_813751#8	YP_91898#2	5.48e-12

use strict;
use warnings;

my $index=0;
my $line;
my $avgEval;

#fasta formatted input file (e.g. nr)
my $seqFile = $ARGV[0];
$index = $ARGV[1];

#File containing N X N BLAST results
my $blastnxnFile ="nxnblast";
my @evalMatrix;
#fasta formatted output file
my $outputFile = "myfile.clans";

open my $OUTPUT, '>', $outputFile or die "Could not open file $outputFile!";
open my $SEQ, '<', $seqFile or die "Could not open file $seqFile!";
open my $NXN, '<', $blastnxnFile or die "Could not open file $blastnxnFile!";

#Write out the total number of sequences
print $OUTPUT "sequences=".$index."\n";

#Read sequences from the input file and write them into the output file
print $OUTPUT "<seq>\n";

while ($line=<$SEQ>){
	if($line =~ /(\S+)/){
		print $OUTPUT $line;
	}
}
close $SEQ;

print $OUTPUT "</seq>\n";

#write random x,y,z cordinates
print $OUTPUT "<pos>\n";


for(my $i=0; $i<$index; $i++){
#	printf $OUTPUT $i." ".rand()." ".rand()." ".rand()."\n";
        printf $OUTPUT "%d %.3f %.3f %.3f\n", $i, rand(), rand(), rand();


}
print $OUTPUT "</pos>\n";

print $OUTPUT "<hsp>\n";

while($line=<$NXN>){
	$line =~ /(\S+)\s+(\S+)\s+(\S+)/;
	$evalMatrix[$1][$2]=$3;
#	print $OUTPUT $1." ".$2.":".$3."\n";
}

for (my $i=0; $i<$index-1; $i++){
	for (my $j=$i+1; $j<$index; $j++){

		if(exists($evalMatrix[$i][$j]) && exists($evalMatrix[$j][$i])){

                        if($evalMatrix[$i][$j] < $evalMatrix[$j][$i]){
				$avgEval = $evalMatrix[$i][$j]
			}
			else{
				$avgEval = $evalMatrix[$j][$i]
			}
                        $avgEval=sprintf("%.1e", $avgEval);
			print $OUTPUT $i." ".$j.":".$avgEval."\n";
		}
		elsif(exists($evalMatrix[$i][$j])){
			$avgEval=$evalMatrix[$i][$j];
                        $avgEval=sprintf("%.1e", $avgEval);
                        print $OUTPUT $i." ".$j.":".$avgEval."\n";
		}elsif(exists($evalMatrix[$j][$i])){
                        $avgEval=$evalMatrix[$j][$i];
	                $avgEval=sprintf("%.1e", $avgEval);
                        print $OUTPUT $i." ".$j.":".$avgEval."\n";
                }
	}
}

print $OUTPUT "</hsp>\n";

close $NXN;
close $OUTPUT;

